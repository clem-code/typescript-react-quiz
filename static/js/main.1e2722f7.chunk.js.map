{"version":3,"sources":["components/API.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","components/utils.ts","images/patrick-tomasso.jpg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","question","answers","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","correctAnswer","disabled","value","onClick","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","array","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","BGImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","console","log","startTrivia","HARD","newQuestions","length","undefined","e","currentTarget","prev","answerObject","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e2722f7.chunk.js","sourcesContent":["import { shuffleArray } from './utils';\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n}\nexport type QuestionState = Question & { answers: string[] };\n\n\nexport enum Difficulty {\n  EASY = 'easy',\n  MEDIUM = 'medium',\n  HARD = 'hard'\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&category=10&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question)=>(\n    {\n      ...question,\n      answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n    }\n  ))\n}","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: 1100px;\n  background: #ebfeff;\n  border-radius: 10px;\n  border: 2px solid #0085a3;\n  padding: 20px;\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n  text-align: center;\n  p {\n    font-size: 1rem;\n  }\n`;\n\ntype ButtonWrapperProps = {\n  correct: boolean;\n  userClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n  transition: all 0.3s ease;\n  :hover {\n    opacity: 0.8;\n  }\n  button {\n    cursor: pointer;\n    user-select: none;\n    font-size: 0.8rem;\n    width: 100%;\n    height: 40px;\n    margin: 5px 0;\n    background: ${({ correct, userClicked }) =>\n    correct\n      ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\n      : !correct && userClicked\n        ? 'linear-gradient(90deg, #FF5656, #C16868)'\n        : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n    border: 3px solid #ffffff;\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n    border-radius: 10px;\n    color: #fff;\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n  }\n`;\n","import React from 'react'\n//\nimport { AnswerObject } from '../App';\n//styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({\n  question, answers, callback, userAnswer, questionNr, totalQuestions }) => \n  (<Wrapper>\n    <p className=\"number\">Question: {questionNr} / {totalQuestions}</p>\n    <p dangerouslySetInnerHTML={{ __html: question }} />\n    <div>\n      {answers.map(answer => (\n        <ButtonWrapper \n        key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={userAnswer ? true : false} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }} />\n          </button></ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>)\n\nexport default QuestionCard","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);","export default __webpack_public_path__ + \"static/media/patrick-tomasso.830fae3e.jpg\";","\nimport styled, { createGlobalStyle } from 'styled-components';\nimport BGImage from './images/patrick-tomasso.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n  html {\n    height: 100%;\n  }\n  body {\n    background-image: url(${BGImage});\n    background-size: cover;\n    margin: 0;\n    padding: 0 20px;\n    display: flex;\n    justify-content: center;\n  }\n  * {\n    font-family: 'Catamaran', sans-serif;\n    box-sizing: border-box;\n  }\n`;\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  > p {\n    color: #fff;\n  }\n  .score {\n    color: #fff;\n    font-size: 2rem;\n    margin: 0;\n  }\n  h1 {\n    font-family: Fascinate Inline;\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\n    font-weight: 400;\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    -moz-text-fill-color: transparent;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    text-align: center;\n    margin: 20px;\n  }\n  .start, .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n  .start {\n    max-width: 200px;\n  }\n`;","import React, { useState } from 'react';\n//components\nimport QuestionCard from './components/QuestionCard';\nimport { fetchQuizQuestions } from './components/API';\n//TYPES\nimport { QuestionState, Difficulty } from './components/API'\n//styles\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\nconst TOTAL_QUESTIONS = 10\n\nfunction App() {\n  const [loading, setLoading] = useState(false)\n  const [questions, setQuestions] = useState<QuestionState[]>([])\n  const [number, setNumber] = useState(0)\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([])\n  const [score, setScore] = useState(0)\n  const [gameOver, setGameOver] = useState(true)\n\n  console.log(questions)\n\n  const startTrivia = async () => {\n    setLoading(true)\n    setGameOver(false)\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.HARD\n    );\n    setQuestions(newQuestions)\n    setScore(0)\n    setUserAnswers([])\n    setNumber(0)\n    setLoading(false)\n  }\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      //check answer against correct answer\n      const correct = questions[number].correct_answer === answer\n      //add score if correct\n      if (correct) setScore(prev => prev + 1)\n      //save answer\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer\n      }\n      setUserAnswers((prev) => [...prev, answerObject])\n    }\n  }\n  const nextQuestion = () => {\n\n    //move on to next question if not last question...\n    const nextQuestion = number + 1;\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true)\n    } else {\n      setNumber(nextQuestion)\n    }\n\n  }\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>Book Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>Start</button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />)}\n        <button className=\"next\" onClick={nextQuestion}>Next Question</button>\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}